package builder

//Паттерн применяется для конструирования сложных объектов, части которых создаются отдельно
//и затем "собираются" в один.

//Когда у нас предполагается множество разных объектов с одинаковой структурой, использование этого паттерна
//позволяет разделить создание объекта на кирпичики. Для каждого логически(!) другого типа объектов мы можем
//предопределить параметры этих "кирпичиков", что значительно упростит их дальнейшее создание.

//В Go ценят простоту и минимализм, избегая излишней абстракции, поэтому вводить "Директора" не будем, ограничимся
//обычной функцией BuildCan

// Например, мы хотим создавать баночки с газировкой

type SodaCan struct {
	name   string
	volume float32
	color  string
}

type Builder interface {
	SetName()
	SetVolume(volume float32)
	SetColor()
	Build() SodaCan
}

func BuildCan(builder Builder, volume float32) SodaCan {
	builder.SetName()
	builder.SetVolume(volume)
	builder.SetColor()
	return builder.Build()
}

//Плюсы:
//1. Логика и параметры каждого "кирпичика" по большей части предопределены
//2. Каждый кирпичик выполняет свою функцию и никак не взаимодействует с остальными, что уменьшает связанность
//3. Создание даже больших объектов становится компактным
