package facade

/*
	Паттерн Фасад может быть полезен если мы хотим создать простой интерфейс для какой-то
	сложной системы, в которой различные элементы должны взаимодействовать между собой.
	Таким образом, уровню выше не нужно будет ничего знать о том, что и как
	происходит за фасадом.

	Важно отметить, что Фасад только предоставляет интерфейс, скрывающий сложную логику, но
	сам он никаких вычислений не делает, а просто в нужном порядке задействует
	необходимые для осуществления задачи компоненты

	Плюсы:
		1.Уровень выше ничего не знает о том, что происходит за фасадом,
			что соответствует принципу инверсии зависимостей
		2.Объединяет "под одной крышей" необходимые для операций компоненты.
		3.Упрощает дальнейшее использование сложной системы
		Минусы:
		1.Чем больше элементов под фасадом, тем сложнее его протестировать.
		2.Чем больше слоев абстракции, тем меньше производительность
		3.Необходимо следить за тем, чтобы фасад не превратился в god-object

	Представим, что у нас есть умный дом. Он включает в себя кучу различных умных-устройств,
	которые в зависимости от команды могут включаться/выключаться/менять параметры.
*/

type SmartHomeFacade struct {
	tv       *smartTv
	light    *smartLight    //умное освещение
	kettle   *smartKettle   //умный чайник
	jalousie *smartJalousie //умные занавески
}

func newSmartHomeFacade() SmartHomeFacade {
	return SmartHomeFacade{
		tv:       newSmartTv(),
		light:    newSmartLight(),
		kettle:   newSmartKettle(),
		jalousie: newSmartJalousie(),
	}
}

func (s SmartHomeFacade) WatchMovieNight(title string) {
	//включаем режим ночного освещения
	s.light.TurnNightMode()
	//включим чайник
	s.kettle.HeatWater()
	//закроем шторы
	s.jalousie.Close()
	//включим фильм
	s.tv.WatchMovie(title)
}
